---
import NoteCard from "./NoteCard.astro";
import NoteSkeleton from "./NoteSkeleton.astro";
import AddNoteModal from "./AddNoteModal.astro";
import { Icon } from "astro-icon/components";
import { queryDb } from "../lib/db";

// Initial fetch of notes with limit
const initialNotes = await queryDb(`
  SELECT * FROM notes 
  ORDER BY created_at DESC 
  LIMIT 12
`);
---

<div class="mt-8 mx-3">
  <div
    id="notes-container"
    class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-5 grid-flow-row-dense auto-rows-[minmax(0,auto)]"
    style="grid-auto-rows: masonry; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));"
  >
    {
      initialNotes.rows.length > 0
        ? initialNotes.rows.map((note: any) => (
            <NoteCard
              id={note.id}
              text={note.text}
              author={note.author}
              date={new Date(note.created_at).toLocaleDateString()}
              liked={note.likes > 0}
            />
          ))
        : Array(8)
            .fill(0)
            .map(() => <NoteSkeleton />)
    }
  </div>
  <div id="loading-spinner" class="hidden flex justify-center my-8">
    <Icon name="mdi:loading" class="animate-spin" size={30} />
  </div>
</div>

<div class="fixed bottom-16 right-8">
  <div class="relative inline-flex group">
    <div
      class="absolute transitiona-all duration-1000 opacity-70 -inset-px bg-gradient-to-r from-[#44BCFF] via-[#FF44EC] to-[#FF675E] rounded-full blur-lg group-hover:opacity-100 group-hover:-inset-1 group-hover:duration-200 animate-tilt"
    >
    </div>
    <button
      id="add-note-btn"
      class="relative inline-flex items-center justify-center p-3 text-lg font-bold text-white transition-all duration-200 bg-red-500 font-pj rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
      role="button"
    >
      <Icon name="mdi:plus" size={30} />
    </button>
  </div>
</div>

<AddNoteModal />

<script>
  let page = 1;
  const LIMIT = 12;
  let loading = false;
  let hasMore = true;

  async function loadMoreNotes() {
    if (loading || !hasMore) return;

    loading = true;
    const spinner = document.getElementById("loading-spinner");
    spinner?.classList.remove("hidden");

    try {
      const response = await fetch(
        `/api/notes?page=${page + 1}&limit=${LIMIT}`
      );
      const notes = await response.json();

      if (notes.length < LIMIT) {
        hasMore = false;
      }

      if (notes.length > 0) {
        const container = document.getElementById("notes-container");
        notes.forEach((note) => {
          const noteCard = createNoteCard(note);
          container?.appendChild(noteCard);
        });
        page++;
      }
    } catch (error) {
      console.error("Error loading more notes:", error);
    } finally {
      loading = false;
      spinner?.classList.add("hidden");
    }
  }

  function createNoteCard(note) {
    const template = document.createElement("template");
    template.innerHTML = `
      <div is="note-card"
        class="relative block overflow-hidden rounded-xl bg-white border border-gray-100 p-4 sm:p-6 lg:p-8 shadow-lg hover:bg-yellow-50 cursor-pointer"
        data-note-id="${note.id}"
        data-liked="${note.likes > 0}"
      >
        <div class="flex flex-col-reverse">
          <span class="text-xs text-gray-500">${new Date(note.created_at).toLocaleDateString()}</span>
        </div>
        <div class="mt-3">
          <p class="text-pretty text-sm text-gray-700">${note.text}</p>
        </div>
        <div class="mt-4 flex gap-4 sm:gap-6 justify-between items-end">
          <span class="text-sm font-medium text-gray-600">${note.author}</span>
          <svg class="w-[18px] h-[18px] transition-colors duration-200 ${note.likes > 0 ? "text-red-500" : "text-gray-300"}" data-astro-icon="mdi:heart"></svg>
        </div>
      </div>
    `.trim();
    return template.content.firstElementChild;
  }

  // Infinite scroll observer
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          loadMoreNotes();
        }
      });
    },
    { rootMargin: "100px" }
  );

  const spinner = document.getElementById("loading-spinner");
  if (spinner) {
    observer.observe(spinner);
  }

  // Handle add note modal
  const addButton = document.getElementById("add-note-btn");
  addButton?.addEventListener("click", () => {
    document.dispatchEvent(new CustomEvent("open-add-note-modal"));
  });
</script>
